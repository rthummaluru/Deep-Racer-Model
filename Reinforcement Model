import math

def reward_function(params):

    # base constants
    MAX_REWARD = 1e2
    MIN_REWARD = 1e-3
    DIRECTION_THRESHOLD = 10.0
    ABS_STEERING_THRESHOLD = 20

    #params 
  # "all_wheels_on_track": Boolean, flag to indicate if the vehicle is on the track
    on_track = params['all_wheels_on_track']
  # "distance_from_center": float, distance in meters from the track center 
    distance_from_center = params['distance_from_center']
  # "track_width": float, width of the track
    track_width = params['track_width']
  # "streering_angle": float, vehicle's steering angle in degrees (Only need the absolute steering angle for calculations)
    steering = abs(params['steering_angle']) 
  # "speed": float, vehicle's speed in meters per second (m/s)
    speed = params['speed']
  # "waypoints": [[float, float], â€¦ ], list of [x,y] as milestones along the track center
    waypoints = params['waypoints']
  # "closest_waypoints": [int, int], indices of the two nearest waypoints.
    closest_waypoints = params['closest_waypoints'] 
  # "heading": float, vehicle's yaw in degrees
    heading = params['heading']
  # "steps": int, number steps completed
    steps = params['steps']
  # "progress": float, percentage of track completed
    progress = params['progress']

    # negative exponential penalty
    reward = math.exp(-6 * distance_from_center)

    # rewards car if all four wheels are on the track
    def on_track_reward(current_reward, on_track):
        if not on_track:
            current_reward = MIN_REWARD
        else:
            current_reward = MAX_REWARD
        return current_reward

    # gives larger rewards to the car the closer it stays to the center of the track
    def distance_from_center_reward(current_reward, track_width, distance_from_center):

        marker_1 = 0.1 * track_width
        marker_2 = 0.25 * track_width
        marker_3 = 0.5 * track_width

        if distance_from_center <= marker_1:
            current_reward *= 1.2
        elif distance_from_center <= marker_2:
            current_reward *= 0.8
        elif distance_from_center <= marker_3:
            current_reward += 0.5
        else:
            current_reward = MIN_REWARD  # likely crashed/ close to off track

        return current_reward
    
    # rewards if the car is in a straight line going fast
    def straight_line_reward(current_reward, steering, speed):
        if abs(steering) < 0.1 and speed > 2.5:
            current_reward *= 1.2
        return current_reward

    # rewards the car if it's heading in the same direction and angle as the closest waypoints in front of it
    def direction_reward(current_reward, waypoints, closest_waypoints, heading):

        next_point = waypoints[closest_waypoints[1]]
        prev_point = waypoints[closest_waypoints[0]]

        # Calculate the direction in degrees
        direction = math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0]) 
        direction = math.degrees(direction)

        # difference in track direction and car heading angle
        direction_diff = abs(direction - heading)

        # Penalize if the difference in track direction and car heading angle is too large
        if direction_diff > DIRECTION_THRESHOLD:
            current_reward *= 0.5

        return current_reward
    
    # Penalize the car if it is steering too much
    def steering_reward(current_reward, steering):
        if abs(steering) > ABS_STEERING_THRESHOLD:
            current_reward += 0.6
        return current_reward
    
    # Rewards a decrease in speed while steering
    def throttle_reward(current_reward, speed, steering):
        if speed > 1.75 - (0.4 * abs(steering)):
            current_reward *= 0.8
        return current_reward
        
    # Rewards the car if it takes less actions to complete the track
    def step_rewards(current_reward, progress, steps):
        if steps > 0:
            current_reward += ((progress*150)/steps)**2
        else:
            current_reward *= 0.5
        return current_reward


    reward = on_track_reward(reward, on_track)
    reward = distance_from_center_reward(reward, track_width, distance_from_center)
    reward = straight_line_reward(reward, steering, speed)
    reward = direction_reward(reward, waypoints, closest_waypoints, heading)
    reward = steering_reward(reward, steering)
    reward = throttle_reward(reward, speed, steering)
    reward = step_rewards(reward, progress, steps)

    return float(reward)
